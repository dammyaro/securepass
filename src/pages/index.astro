---
import '../styles/global.css';
import '../styles/styles.css';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecurePass</title>
    <link rel="icon" href="/securepass/favicon.svg" type="image/svg+xml">
</head>
<body>
    <header class="header">
        <div class="logo">
            <img src="/securepass/logo.svg" alt="SecurePass Logo">
        </div>
                <div class="header-controls">
            <button id="themeToggle" class="theme-toggle-button">
                <img src="/securepass/sun.svg" alt="Light Mode" class="theme-icon light">
                <img src="/securepass/moon.svg" alt="Dark Mode" class="theme-icon dark">
            </button>
            <a href="#" class="chrome-extension-btn">Download Chrome extension</a>
        </div>
    </header>
    <div class="center-content">
        <h1 class="app-title">SecurePass</h1>
        <div class="subtitle">Generate strong, random passwords instantly.</div>
        <div class="password-card">
            <div class="password-display" id="passwordDisplay">
                <span class="placeholder-text">Tap generate for a secure password</span>
            </div>
            <div class="button-group">
                <button class="generate-btn">Generate</button>
                <button class="copy-btn" id="copyBtn">Copy</button>
            </div>
        </div>
    </div>
    <div id="toast" class="toast">Password copied to clipboard!</div>
    <script>
        function generatePassword() {
            const length = 16;
            const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
            let password = '';
            for (let i = 0; i < length; i++) {
                password += charset.charAt(Math.floor(Math.random() * charset.length));
            }
            const passwordDisplay = document.getElementById('passwordDisplay');
            if (passwordDisplay) {
                passwordDisplay.textContent = password;
                passwordDisplay.classList.remove('fade-in');
                // Force reflow to restart animation
                void passwordDisplay.offsetWidth;
                passwordDisplay.classList.add('fade-in');
                setTimeout(() => {
                    passwordDisplay.classList.remove('fade-in');
                }, 300);
            }
            const copyBtn = document.getElementById('copyBtn');
            if (copyBtn) {
                copyBtn.textContent = 'Copy';
                copyBtn.classList.remove('copied');
            }
        }

        function copyPassword() {
            const passwordDisplay = document.getElementById('passwordDisplay');
            const copyBtn = document.getElementById('copyBtn');
            if (!passwordDisplay || passwordDisplay.textContent === 'Tap generate for a secure password') {
                return;
            }
            const passwordText = passwordDisplay.textContent || '';
            navigator.clipboard.writeText(passwordText).then(() => {
                if (copyBtn) {
                    copyBtn.textContent = 'Copied';
                    copyBtn.classList.add('copied');
                    showToast();
                    setTimeout(() => {
                        copyBtn.textContent = 'Copy';
                        copyBtn.classList.remove('copied');
                    }, 2000);
                }
            }).catch(() => {
                const textArea = document.createElement('textarea');
                textArea.value = passwordText;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                if (copyBtn) {
                    copyBtn.textContent = 'Copied';
                    copyBtn.classList.add('copied');
                    showToast();
                    setTimeout(() => {
                        copyBtn.textContent = 'Copy';
                        copyBtn.classList.remove('copied');
                    }, 2000);
                }
            });
        }

        function showToast() {
            const toast = document.getElementById('toast');
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 2000);
        }

        document.addEventListener('DOMContentLoaded', () => {
            const generateBtn = document.querySelector('.generate-btn');
            if (generateBtn) {
                generateBtn.addEventListener('click', generatePassword);
            }

            const copyBtn = document.getElementById('copyBtn');
            if (copyBtn) {
                copyBtn.addEventListener('click', copyPassword);
            }

            generatePassword();

            const themeToggle = document.getElementById('themeToggle');
            if (themeToggle) {
                themeToggle.addEventListener('click', () => {
                    document.body.classList.toggle('light-mode');

                    // Update icon visibility
                    const isLightMode = document.body.classList.contains('light-mode');
                    localStorage.setItem('theme', isLightMode ? 'light' : 'dark');
                });

                // Check for saved theme preference
                const savedTheme = localStorage.getItem('theme');
                if (savedTheme === 'light') {
                    document.body.classList.add('light-mode');
                }
            }
        });
    </script>
</body>
</html>